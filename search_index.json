[
["index.html", "Interviewgator Preface", " Interviewgator Preface Review and practice common data structures to prepare for your… interviewgation! In this book based on Andrei Neagoie’s Master the Coding Interview: Data Structures + Algorithms you will be able to learn/review common data structures, algorithms and interview techniques. PS: if you are looking for a job, you should totally checkout Andrei’s courses! "],
["big-o-notation.html", "1 Big O Notation 1.1 O(n) - Linear Time 1.2 O(1) - Constant Time 1.3 Big O Simplification", " 1 Big O Notation What is good code? Good code is a code that is readable and scalable. Big O Notation gives an idea of the scalability of our code. In other words, how efficient our code is. It is especially important in big tech companies because they manage a lot of data, and as the data increase, the execution speed of the code slows down. So it is very important to optimize the code to make sure it runs as fast as possible. But how can we mesure code efficiency? Here is what code efficiency looks like on a Big O chart (Elements is the amount of data past to the function and Operations represent the efficiency of the function): Big O Complexity Chart from bigocheatsheet.com As we can see, the O(1) and O(log n) are the most performant scripts and the O(n!)and O(2^n) are the least perfomant scripts. When calculating a Big O notation, we always give the worst possible performance for the script and simplify the notation by removing constants, different terms for input and droping the non dominant. For more information please head to the Big O Simplification section. 1.1 O(n) - Linear Time This is probably the most common Big O notation. It simply means that when you have an input of n the script will perform n operations on it. As the number of input increases, the number of operations increases in a linear fashion. If you input an array of size 100, the function will perform 100 operations, if you input an array of 1000000 items, it will perform 1000000 operations! Example: const bigArray = new Array(100).fill(0); function loopArray(array) { for (let i = 0; i &lt; array.length; i++) { console.count(array[i]); } } loopArray(bigArray); Try it out on repl.it! 1.2 O(1) - Constant Time Another very common Big O notation. It is the most efficient Big O there is! No matter the size of the input, the function will always perform only one operation. The input could be an array of 1, 100 or 1000000 elements, the function will always do only 1 operation. Example: const bigArray = new Array(100).fill(0); function firstElement(array) { console.count(array[0]) } firstElement(bigArray); Try it out on repl.it! Note: If there are multiple operations in the O(1) function, we still write it O(1). Because no matter how big the input is, the number of operation stills the same, the execution time is still constant. const bigArray = new Array(100).fill(0); function firstTwoElements(array) { console.count(array[0]); //O(1) console.count(array[1]); //O(1) //... //O(1) //gives: O(1 + 1 + ...) = O(1) } firstTwoElements(bigArray); Try it out on repl.it! 1.3 Big O Simplification Usually, when calculating the Big O of a function. We don’t go through the whole function adding every variable assignment, loops and so on, we give the general trend of the function when called with a big input. Example: function complexBigONotation(input) { let a = 10; //O(1) a = 50 + 3; //O(1) for (let i = 0; i &lt; input.length; i++) { //O(n) anotherFunction(); //O(n) let extraBoolean = true; //O(n) a++; //O(n) } for (let i = 0; i &lt; input.length; i++) { //O(n) a++; //O(n) } return a; //O(1) } //gives: O(n + n + n + n + n + n + 1 + 1 + 1) = O(6n + 3) = O(6n) = O(n) This example function is actually an O(n) function. Here is how we simplify a Big O notation. 1.3.1 Rule 1: Worst Case 1.3.2 Rule 2: Remove Constants 1.3.3 Rule 3: Different Terms For Inputs 1.3.4 Rule 4: Drop Non Dominants "],
["data-structures.html", "2 Data Structures", " 2 Data Structures "],
["algorithms.html", "3 Algorithms", " 3 Algorithms "],
["non-technical.html", "4 Non Technical", " 4 Non Technical "],
["playground.html", "5 Playground", " 5 Playground Coming Soon… "],
["resources.html", "6 Resources", " 6 Resources Master the Coding Interview: Data Structures + Algorithms: The online course this book is based upon repl.it: online coding environment bigocheatsheet.com: Big O notation graph and common data structures operations "]
]
